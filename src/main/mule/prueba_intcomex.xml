<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd  http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd">
    <apikit:config name="prueba_intcomex-config" api="resource::d5e0a5d5-ffb7-4a60-9c64-b88aa27e1659:prueba_intcomex:1.0.3:raml:zip:prueba_intcomex.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpStatus" />
    <http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="fe37d70d-a4ea-4f96-a140-a15e954e0b4c">
        <http:listener-connection host="0.0.0.0" port="8081" readTimeout="60000"/>
    </http:listener-config>
    <db:config name="Database_Config" doc:name="Database Config" doc:id="be37e20c-d446-48ba-8b25-eb19269c528c">
        <db:my-sql-connection host="mulesoft.cp6g4g0wgvbq.us-east-2.rds.amazonaws.com" port="3306" user="admin" database="intcomexdb" password="avnVUF69."/>
    </db:config>
    <flow name="prueba_intcomex-main">
        <http:listener config-ref="HTTP_Listener_config" path="/api/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:router config-ref="prueba_intcomex-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">400</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">406</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">501</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="prueba_intcomex-console">
        <http:listener config-ref="HTTP_Listener_config" path="/console/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body>#[payload]</http:body>
                <http:headers>#[vars.outboundHeaders default {}]</http:headers>
            </http:error-response>
        </http:listener>
        <apikit:console config-ref="prueba_intcomex-config" />
        <error-handler>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="get:\prueba-intcomex\v1\products:prueba_intcomex-config">
        <set-variable value="#[attributes.queryParams.pageSize as Number default 10]" doc:name="Set PageSize" doc:id="985e1cee-cd67-4011-b3c3-3755c0238448" variableName="pageSize" />
        <set-variable value="#[attributes.queryParams.page as Number default 1]" doc:name="Set Page" doc:id="4d176feb-fb86-4bbf-96d6-a48ab90db394" variableName="page" />
        <set-variable value="#[vars.pageSize * (vars.page - 1)]" doc:name="Set Offset" doc:id="a6f6e8f5-7f3c-4d71-bc99-737cc9364860" variableName="offset" />
        <db:select doc:name="Select" doc:id="5617545e-fbff-48db-9dba-7f8260bc1806" config-ref="Database_Config">
            <db:sql><![CDATA[SELECT * FROM product LIMIT :pageSize OFFSET :offset]]></db:sql>
            <db:input-parameters><![CDATA[#[{
	pageSize: vars.pageSize,
    offset: vars.offset
}]]]></db:input-parameters>
        </db:select>
        <ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
    <flow name="get:\prueba-intcomex\v1\category\(id):prueba_intcomex-config">
        <db:select doc:name="Select Category By Id" doc:id="fa59a73e-1d18-4d11-8399-398f897ea0d0" config-ref="Database_Config">
            <db:sql><![CDATA[SELECT * FROM category WHERE id = :id]]></db:sql>
            <db:input-parameters><![CDATA[#[{
	id: attributes.uriParams.id
}]]]></db:input-parameters>
        </db:select>
        <ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
    <flow name="get:\prueba-intcomex\v1\products\(id):prueba_intcomex-config">
        <db:select doc:name="Select Product By Id" doc:id="d2750abc-001c-42e4-98b6-81292329f81b" config-ref="Database_Config">
            <db:sql><![CDATA[SELECT * FROM product WHERE id = :id]]></db:sql>
            <db:input-parameters><![CDATA[#[{
	id: attributes.uriParams.id
}]]]></db:input-parameters>
        </db:select>
		<ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
    <flow name="post:\prueba-intcomex\v1\category:application\json:prueba_intcomex-config">
        <set-variable value="#[payload.attributes.generatedKeys[0]]" doc:name="Set Category Id" doc:id="f277a58c-2eb5-47bb-8902-ffcab3834fbe" variableName="categoryId" />
        <db:insert doc:name="Insert Category" doc:id="1ba61509-53a0-42e9-a83e-0c67c692ccc2" config-ref="Database_Config">
            <db:sql><![CDATA[INSERT INTO category (name, description, image_url) VALUES (:name, :description, :image_url)]]></db:sql>
            <db:input-parameters><![CDATA[#[{
	id: vars.categoryId,
	name: payload.name,
	description: payload.description,
	image_url: payload.image_url
}]]]></db:input-parameters>
        </db:insert>
        <ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  "responseType": {
    "value": "OK"
  },
  "responseDetail": {
    "desc": "Categoría creada exitosamente"
  }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>
    <flow name="post:\prueba-intcomex\v1\products:application\json:prueba_intcomex-config">
        <set-variable value="#[payload.attributes.generatedKeys[0]]" doc:name="Set Product Id" doc:id="bf2bf5d8-0c61-4c80-982e-72e612cfe4f0" variableName="productId" />
		<ee:transform doc:name="Transform Message" doc:id="54d86bee-5bdd-4c0d-8cd9-bb84e4e868a2">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
var categories = [1, 2]
var categoriesCount = sizeOf(categories)
---
1 to 100000 map ((item, index) -> {
    name: "Producto " ++ (index + 1 as String),
    description: "Descripción del producto " ++ (index + 1 as String),
    price: (random() * (100000 - 10) + 10) as Number,
    category_id: categories[random() * categoriesCount] 
})
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<batch:job jobName="prueba_intcomexBatch_Job" doc:id="f02dfce5-5ba8-4b23-ac30-b63cb865ad2a" blockSize="1000">
			<batch:process-records >
				<batch:step name="Batch_Step" doc:id="9f82b09a-a489-41c4-b8ed-379d38309ca1" >
					<db:insert doc:name="Insert Product" doc:id="60c37ffc-b76a-4ded-a335-d02bcb78144c" config-ref="Database_Config">
            <db:sql><![CDATA[INSERT INTO product (name, description, price, category_id) VALUES (:name, :description, :price, :category_id)]]></db:sql>
            <db:input-parameters><![CDATA[#[{
	id: vars.productId,
	name: payload.name,
	description: payload.description,
	price: payload.price,
	category_id: payload.category_id
}]]]></db:input-parameters>
        </db:insert>
				</batch:step>
			</batch:process-records>
			<batch:on-complete >
				<logger level="INFO" doc:name="Logger" doc:id="59a8c427-542a-4f40-839e-7c5eded0e75d" message="#[payload]" />
			</batch:on-complete>
		</batch:job>
		<ee:transform doc:name="Transform Message">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  "responseType": {
    "value": "OK"
  },
  "responseDetail": {
    "desc": "Producto creado exitosamente"
  }
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
    </flow>

    
</mule>
